== Health Warning ==

This is a preliminary release that I consider as alpha code re core functionality though I
have only really done main path coverage. I have released it at this stage primarily for feedback
from the OPcache developers so that I can align what I am doing to their input before even
suggesting progress towards a merge.  

I still have to implement / shake down the following, so still some way to go, but as to the dogma
"there's no point in using a file cache because it makes no performance difference", this version
does show by example that it does, and a material one.

== TODOs ==

*   If the script doesn't have write access to the cache directory then the open_temporary_file()
    for any new opcache fails, generating an error "Unable to create temporary file: XXX".  This 
    probably shouldn't be error here.  The correct action is to generate a warning and revert back 
    to no cached execution.  

*   Need a different guard on use of lock file. if use_file_cache gets disabled during run, we
    default back to normal opcache mode which uses the lockfile, but this hasn't been enabled.
    Should just not use lockfile for all cli and cgi modes.

*   Script invalidation and resource exhaustion paths -- at the moment a recompile of the php
    build can invalid the cache due to the ophandler fingerprint mismatch.  Logic needs tidying 
    here.  This is linked to the above.

*   Bare vs. PHP or Zend wrapped I/O for the file cache.  At the moment I use bare (that is Clib)
    I/O.  PHP dev team might wish me to change this.

*   Make tests/std-tests.sh configuration independant

*   Rewrite tests/*.phpt scripts

== Test Framework ==

I can't use the standard test framework for OPcache as I need to test multiple test paths (e.g. 
priming cache, extending cache, readonly cache). To this end, I have added an extra wrapper
tests/std-test.sh which does this, and at the moment this is still specific to my config. However, I
really need to extend the functionality of the run-tests.php script to be cache-aware (e.g. at the
moment is always generates a .php script from the .phpt which means that I can't path test
validation.) So to filter out false fails I rerun these with standard Ubuntu PHP 5.4.9 with and
without the opcache extension loaded and discount those which fail identically on both or fail with
a time / run dependent change that can be expected by examination of the test script.

I've now extented the build process to build any combination of four build variants automatically
*  a maintainer-ZTS PHP 5.3.17 debug-enabled build with a debug enabled MLC OPcache
*  a non-ZTS PHP 5.4.9 debug-enabled build with a debug enabled MLC OPcache
*  a "shrink-wrapped" PHP 5.4.9-4ubuntu2 production build using an -Ofast "production" MLC OPcache
*  a "shrink-wrapped" PHP 5.4.9-4ubuntu2 production build using an -Ofast "production" OPcache

and I have wrappers around the full PHP tests doing 4 complete runs for these variants:
*  When the cache extension isn't loaded PHP uses its default mode of compile on load before execution.
*  When the cache doesn't exist the compiler is invoked to compile the scripts and create the cache.
*  When the cache does exist, the compile isn't invoked but the compiled scripts are loaded from the cache.
*  In some cases conditional path result in additional scripts being compiled so a third test pass is needed.
except in the last "shrink-wrapped" where only one run is needed.

I then mine the test logs and build a summary spreadsheet of the fails (currently 117). Of these

42   are artifacts of the cached compiled, e.g. a compiler warning is omitted because the compile is
     cached.
28   are because the PHAR extension doesn't play well with non-ZTS PHP 5.4.9 debug-enabled build
5    are because of known optimization side-effects
9    are some artifact of reflection documentation failures

leaving ~30 that I have picked through and classified to see if they merit generating debug test
cases to analyse. I haven't found one which appears to be a genuine OPcache bug rather than a test
artefact,  so MLC OPcache now has a clean bill of health as far as the standard tests go.

I now need to consider some specific OPcache path related tests.

== Other code and test variants ==

I am defering all work on the following until I get some working engagement / traction
with the Zend team on MLC OPcache.
*   32-bit build tests
*   PHP 5.2 
*   PHP 5.5
*   Windows API builds
 
== Known issue on PHP variant ==

There are also some subtle differences between PHP 5.4.9-4ubuntu2 and my dev PHP 5.4.9 compile, 
e.g. the following script

    <?php
    var_dump(array("sd"));
    var_dump("hello\r\nthere");

on Ubuntu PHP generates:

    array(1) {
      [0] =>
      string(2) "sd"
    }
    string(12) "hello\r\nthere"

and on mine dev build generates (even with opcache disabled):

    array(1) {
      [0]=>
      string(2) "sd"
    }
    string(12) "hello
    there"

Note the dropping of the space between the index and the =>, and the failure to escape \r\n.

== Response to resource exhaustion and invalidated cache ==

Opcache optionally does timestamp checks on files and can then set persistent_script->corrupted = 1
ZSMMG(wasted_shared_memory) and schedule zend_accel_schedule_restart_if_necessary(); these need to
map onto file-cache actions: once the cache is suspect opcache should be disabled, all saving of 
modules turned off and the cache deleted.

== Rationalizing Interned Pool ==

OPcache creates its own interned pool.  Whilst this has significant benefits for persistent modes,
it has none in the per-process / request mode of MLC-OPcache.  TBD -- backing this out.

== Update Cache Fingerprint Logic ==

This is currently behind the description in https://github.com/TerryE/opcache/wiki/MLC-OPcache-details

== Simple Benchmark ==

Prime VFAT cache, 100 reps uncached; prime file and VFAT cache, 100 reps cached.  Build with debug
or timing enabled and set debug_flags 0x800 to report on internals timing.

cd /var/www/drmyhill/maintenance
PHP="php -d opcache.debug_flags=0x800 -d opcache.log_verbosity_level=5"

$PHP -d opcache.enable=0 runJobs.php 
(for ((i=0;i<100;i=i+1)); do $PHP -d opcache.enable=0 runJobs.php; done ) |& grep  -i timing > /tmp/xx.lst
echo >> /tmp/xx.lst
(for ((i=0;i<100;i=i+1)); do rm -f runJobs.cache; $PHP runJobs.php; done ) |& grep -i timing >> /tmp/xx.lst
echo >> /tmp/xx.lst
(for ((i=0;i<100;i=i+1)); do $PHP runJobs.php; done ) |& grep -i timing >> /tmp/xx.lst


