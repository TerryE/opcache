== Health Warning ==

This is a preliminary release that I not consider as even alpha code re core functionality though I
have only really done main path coverage. I have released it at this stage primarily for feedback
from the OPcache developers so that I can align what I am doing to their input before even
suggesting progress towards a merge.  

I still have to implement / shake down the following, so still some way to go, but as to the dogma
"there's no point in using a file cache because it makes no performance difference", this version
does show by example that it does, and a material one.

== Known bugs ==


=== Explicit relocation ptr tagging ===

   This functionality now seems to be working reasonably rebustly. Need to add code to make F/C
   fingerprint dependent on PHP version and toggle non default op handler check.

   Drill down on Invalid reference failures: 
        tests/classes:
            bug30140.php
            bug46246.php
            dtor_scope.php
            lsb_018.php

=== Bare vs. PHP or Zend wrapped I/O for the file cache ===

=== Script invalidation and resource exhaustion paths ===

=== Make tests/std-tests.sh configuration independant ===

=== Rewrite tests/*.phpt scripts === 

== PHP 5.4 Tests ==

PHP 5.4 build is now tested beyond 5.3. This is a non-ZTS build so is blind to some ZTS bugs. 
However the full test suite gives the following results: 

    Number of tests : 12147
    Tests skipped   :  2709
    Tests passed    :  9307
    Expected fail   :    38
    Tests failed    :    93
      identically on both                           :  79  
      ditto but with time / run dependent change    :   3     
      reflection due to Opcache setting             :   8
      hard errors which are all base OPcache bugs   :   3
        tests/output/ob_017              Output diffs
        tests/output/ob_start_basic_004  Output diffs
        Zend/tests/ns_026                error drops function to lc: foo\foo\bar() vs Foo\Foo\Bar()

== PHP 5.3 Tests ==

    Will need to do regression to 5.3 at some point. This is a maintainer ZTS build.

== Other code and test variants ==

I am defering all work on the following until I get some working engagement / traction
with the Zend team on MLC OPcache.
*   32-bit build tests
*   PHP 5.2 
*   PHP 5.5
*   Windows API builds
 
== Test Framework ==

I can't use the standard test framework for OPcache as I need to test multiple test paths (e.g. 
priming cache, extending cache, readonly cache). To this end, I have added an extra wrapper
tests/std-test.sh which does this, and at the moment this is still specific to my config. However, I
really need to extend the functionality of the run-tests.php script to be cache-aware (e.g. at the
moment is always generates a .php script from the .phpt which means that I can't path test
validation.) So to filter out false fails I rerun these with standard Ubuntu PHP 5.4.9 with and
without the opcache extension loaded and discount those which fail identically on both or fail with
a time / run dependent change that can be expected by examination of the test script.


== Known issue on PHP variant ==

There are also some subtle differences between PHP 5.4.9-4ubuntu2 and my dev PHP 5.4.9 compile, 
e.g. the following script

    <?php
    var_dump(array("sd"));
    var_dump("hello\r\nthere");

on Ubuntu PHP generates:

    array(1) {
      [0] =>
      string(2) "sd"
    }
    string(12) "hello\r\nthere"

and on mine dev build generates (even with opcache disabled):

    array(1) {
      [0]=>
      string(2) "sd"
    }
    string(12) "hello
    there"

Note the dropping of the space between the index and the =>, and the failure to escape \r\n.


== Response to resource exhaustion and invalidated cache ==

Opcache optionally does timestamp checks on files and can then set persistent_script->corrupted = 1
ZSMMG(wasted_shared_memory) and schedule zend_accel_schedule_restart_if_necessary(); these need to
map onto file-cache actions: once the cache is suspect opcache should be disabled, all saving of 
modules turned off and the cache deleted.


== Simple Benchmark ==

Prime VFAT cache, 100 reps uncached; prime file and VFAT cache, 100 reps cached.  Build with debug
or timing enabled and set debug_flags 0x800 to report on internals timing.

cd /var/www/drmyhill/maintenance
PHP="php -d opcache.debug_flags=0x800 -d opcache.log_verbosity_level=5"

$PHP -d opcache.enable=0 runJobs.php 
(for ((i=0;i<100;i=i+1)); do $PHP -d opcache.enable=0 runJobs.php; done ) |& grep  -i timing > /tmp/xx.lst
echo >> /tmp/xx.lst
(for ((i=0;i<100;i=i+1)); do rm -f runJobs.cache; $PHP runJobs.php; done ) |& grep -i timing >> /tmp/xx.lst
echo >> /tmp/xx.lst
(for ((i=0;i<100;i=i+1)); do $PHP runJobs.php; done ) |& grep -i timing >> /tmp/xx.lst

